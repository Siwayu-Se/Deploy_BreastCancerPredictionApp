import streamlit as st
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
background_image_url = "https://res.cloudinary.com/idemo/image/upload/qs3xs1limgx1hlijykif"
text_color = "#663333"  # ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

# ‡πÉ‡∏™‡πà CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
st.markdown(
    f"""
    <style>
        .stApp {{
            background-image: url('{background_image_url}');
            background-size: cover;
            background-position: center;
            height: 100vh;
        }}
        h1, h2, h3, p, div {{
            color: {text_color} !important;
        }}
        .history {{
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }}
        /* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏≠‡∏á text_area */
        textarea {{
            font-size: 60px !important;
        }}
        /* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏≠‡∏á number_input */
        .stNumberInput label {{
            font-size: 60px !important;
        }}
    </style>
    """,
    unsafe_allow_html=True
)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü‡πÑ‡∏ß‡πâ
model = joblib.load('model_mlp_best.pkl')

# ‡πÇ‡∏´‡∏•‡∏î scaler ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
scaler = joblib.load('scaler.pkl')

# ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° mapping ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© -> ‡πÑ‡∏ó‡∏¢)
feature_labels = {
    'perimeter_worst': '‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏á (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)',
    'area_worst': '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)',
    'radius_worst': '‡∏£‡∏±‡∏®‡∏°‡∏µ (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)',
    'concave points_worst': '‡∏à‡∏∏‡∏î‡πÄ‡∏ß‡πâ‡∏≤ (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)',
    'concave points_mean': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏∏‡∏î‡πÄ‡∏ß‡πâ‡∏≤',
    'perimeter_mean': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏á',
    'area_mean': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà',
    'radius_mean': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏±‡∏®‡∏°‡∏µ',
    'area_se': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà',
    'concavity_mean': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏ß‡πâ‡∏≤',
    'concavity_worst': '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ß‡πâ‡∏≤ (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)',
    'perimeter_se': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏á',
    'radius_se': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ',
    'compactness_worst': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)',
    'compactness_mean': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô',
    'texture_worst': '‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)',
    'concave points_se': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏ß‡πâ‡∏≤',
    'smoothness_worst': '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)',
    'texture_mean': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß',
    'symmetry_worst': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏°‡∏≤‡∏ï‡∏£ (‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)'
}

feature_names = list(feature_labels.keys())

# ---------------- UI ---------------- #
st.title("üéóÔ∏è ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏î‡πâ‡∏ß‡∏¢ MLP Model")
st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô **‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**")

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
input_data = []
for feature in feature_names:
    label_th = feature_labels[feature]
    value = st.number_input(f"{label_th}", min_value=0.0, step=0.01)
    input_data.append(value)

# ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•"):
    X = np.array(input_data).reshape(1, -1)

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ scaler ‡∏ï‡∏≠‡∏ô train ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô predict ‡∏î‡πâ‡∏ß‡∏¢
    if scaler:
        X = scaler.transform(X)

    prediction = model.predict(X)[0]

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if prediction == 1:
        st.error("üí° ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á (Malignant)")
    else:
        st.success("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á (Benign)")
